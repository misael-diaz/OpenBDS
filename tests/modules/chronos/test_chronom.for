!
!   source: test_chronom.for
!   author: misael-diaz
!   date:   2021-05-31
!
!
!   Synopsis:
!   Tests the chronometer class by delaying the code with expensive 64-bit
!   integer arithmetic operations. Its output is comparable to that produced
!   by the Linux time utility.
!
!
!   Copyright (C) 2021 Misael Diaz-Maldonado
!
!   This program is free software: you can redistribute it and/or modify
!   it under the terms of the GNU General Public License as published by
!   the Free Software Foundation, either version 3 of the License, or
!   (at your option) any later version.
!
!   This program is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!   GNU General Public License for more details.
!
!   You should have received a copy of the GNU General Public License
!   along with this program.  If not, see <http://www.gnu.org/licenses/>.

module test_chronom_module
    use, intrinsic :: iso_fortran_env, only: int64
    implicit none
    private
    public :: test_outcome
    contains
        subroutine test_outcome(i, j)
            ! Synopsis:
            ! Performs a simple equality test.

            integer(kind = int64) :: i
            integer(kind = int64) :: j

            if (i == j) then
                print *, 'equality test: passed'
            else
                print *, 'equality test: failed'
            end if

            return
        end subroutine
end module

program test_chronom
    use, intrinsic :: iso_fortran_env, only: int32, int64
    use chronos, only: chronom
    use test_chronom_module, only: test_outcome
    implicit none

    type(chronom) :: stopwatch

    integer(kind = int32):: i 
    integer(kind = int32):: j
    integer(kind = int64):: total
    integer(kind = int64):: counter = 0_int64
    integer(kind = int32), parameter :: n = 65536


    stopwatch = chronom()               ! instantiates chronometer object
    call stopwatch % tic()


    i = 0
    do while(i /= n)
        j = 0
        do while(j /= n)
            counter = counter + 1_int64         ! delays code
            j = j + 1
        end do
        i = i + 1
    end do
    
    
    call stopwatch % toc()

    ! displays test outcome for the user just to be thorough
    total = int(n, kind = int64) * int(n, kind = int64)
    call test_outcome(total, counter)
    print *, 'total: ', total, counter
    print *, 'elapsed-time (millis): ', stopwatch % etime()
    
end program


! Comments:
! The main objective is to perform a runtime test. Since the real work is
! delegated to the instrinsic procedure system_clock(), we do not bother
! to check the implementation (which can be boiled down to taking a time
! difference and multiplying a conversion factor). Nevetheless, the
! elapsed-time shown by the program is consistent with the real time.
!
! We compare the elapsed-time generated by the chronometer with that
! produced by the Linux time utility. The output of this test can be
! found in: test_chronom.out. (Note that these differ due to the
! overhead of writing to standard output not accounted for by the
! choronometer.)
!
! I could not help myself but to test for the correctness of the integer
! arithmetic computations even though I know it's not strictly necessary.
